{"version":3,"file":"static/js/451.53ddd7fd.chunk.js","mappings":"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","sources":["webpack://new-react/./src/components/UI/FalseTie/FalseTie.module.css?43e0","components/UI/FalseTie/FalseTie.jsx","webpack://new-react/./src/components/UI/MyButton/MyButton.module.css?703f","components/UI/MyButton/MyButton.jsx","constants/BackButton.jsx","pages/ProfilePage/ProfilePage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"FalseTie\":\"FalseTie_FalseTie__tNuux\",\"falseTie\":\"FalseTie_falseTie__m70HA\",\"animationClass\":\"FalseTie_animationClass__vqqwh\",\"add-animation\":\"FalseTie_add-animation__3P3G4\"};","import React, { useCallback, useEffect, useState } from 'react';\r\nimport cl from './FalseTie.module.css'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { addAdvertisment, addCard, addResponce, deleteAdvertisement, deleteCard, deleteResponce } from '../../../store/saves';\r\nconst FalseTie = ({className, id, task, navigate, agree, end = false, ...props}) => {\r\n    const [active, setActive] = useState(false)\r\n\r\n    // const tieRef = useRef(null)\r\n    const savedTasks = useSelector(state => state.saves.tasks)\r\n    const savedResponces = useSelector(state => state.saves.responces)\r\n    const savedCards = useSelector(state => state.saves.cards)\r\n    const dispatch = useDispatch()\r\n    useEffect( () => {\r\n        switch (navigate){\r\n            case \"advertisement\":{\r\n                savedTasks.forEach( (e, i) => {\r\n                    if (e.id === id){\r\n                        setActive(true)\r\n                    }\r\n                } )\r\n                break\r\n            }\r\n            case (\"responce\"):{\r\n                savedResponces.forEach( (e, i) => {\r\n                    if (e.id === id){\r\n                        setActive(true)\r\n                    }\r\n                } )\r\n                break\r\n            }\r\n            case \"card\":{\r\n\r\n                savedCards.forEach( (e,i ) => {\r\n                    if (e.id === id){\r\n                        setActive(true)\r\n                    }\r\n                } )\r\n                break\r\n            }\r\n            default : {\r\n                window.Telegram.WebApp.showAlert('что-то пошло не так')\r\n            }\r\n                \r\n\r\n        }\r\n        \r\n    } , [navigate , savedCards, id, savedTasks, savedResponces] )\r\n\r\n\r\n\r\n\r\n    const deleteCardFunction = useCallback( () => {\r\n        if (agree){\r\n\r\n            window.Telegram.WebApp\r\n            .showPopup({\r\n              title: \"Удалить?\",\r\n              message: \"Удалить из избранного?\",\r\n              buttons: [\r\n                { id: \"save\", type: \"default\", text: \"Да\" },\r\n                { id: \"delete\", type: \"destructive\", text: \"Нет\" },\r\n              ],\r\n            } , (buttonId) => {\r\n        \r\n              if (buttonId === \"delete\" || buttonId === null) {\r\n                \r\n              }\r\n              if (buttonId === \"save\") {\r\n                dispatch(deleteCard(id))\r\n              }\r\n        \r\n        \r\n            } )\r\n        }\r\n        else{\r\n            dispatch(deleteCard(id))\r\n        }\r\n    }  , [id , agree , dispatch] )\r\n\r\n\r\n    const deleteResponceFunc = useCallback( () => {\r\n        if (agree){\r\n\r\n            window.Telegram.WebApp\r\n            .showPopup({\r\n              title: \"Удалить?\",\r\n              message: \"Удалить из избранного?\",\r\n              buttons: [\r\n                { id: \"save\", type: \"default\", text: \"Да\" },\r\n                { id: \"delete\", type: \"destructive\", text: \"Нет\" },\r\n              ],\r\n            } , (buttonId) => {\r\n        \r\n              if (buttonId === \"delete\" || buttonId === null) {\r\n                \r\n              }\r\n              if (buttonId === \"save\") {\r\n                dispatch(deleteResponce(id))\r\n              }\r\n        \r\n        \r\n            } )\r\n        }\r\n        else{\r\n            dispatch(deleteResponce(id))\r\n        }\r\n    } , [id , agree , dispatch] )\r\n    const deleteAdFunction = useCallback(() => {\r\n        if (agree){\r\n\r\n            window.Telegram.WebApp\r\n            .showPopup({\r\n              title: \"Удалить?\",\r\n              message: \"Удалить из избранного?\",\r\n              buttons: [\r\n                { id: \"save\", type: \"default\", text: \"Да\" },\r\n                { id: \"delete\", type: \"destructive\", text: \"Нет\" },\r\n              ],\r\n            } , (buttonId) => {\r\n        \r\n              if (buttonId === \"delete\" || buttonId === null) {\r\n                \r\n              }\r\n              if (buttonId === \"save\") {\r\n                dispatch(deleteAdvertisement(id))\r\n              }\r\n        \r\n        \r\n            } )\r\n        }\r\n        else{\r\n            dispatch(deleteAdvertisement(id))\r\n        }\r\n    } , [id , agree, dispatch] )\r\n\r\n\r\n\r\n    return (\r\n        <div {...props}  onClick={(e) => {\r\n            if (!end){\r\n\r\n                if (!active){\r\n                    switch (navigate){\r\n                        case (\"advertisement\"):\r\n                            dispatch(addAdvertisment([id , task]))\r\n                            break\r\n                        case (\"responce\"):\r\n                            dispatch(addResponce([id, task]))\r\n                            break\r\n                        case (\"card\"):\r\n                            dispatch(addCard([id, task]))\r\n                            break\r\n                        default : \r\n                            window.Telegram.WebApp.showAlert(\"Что-то не то\")\r\n                    }\r\n                    setActive(true)\r\n                    \r\n                }\r\n                else{\r\n                    switch (navigate){\r\n                        case (\"advertisement\"):\r\n                            deleteAdFunction()\r\n                            break;\r\n                        case (\"responce\"):\r\n                            deleteResponceFunc()\r\n                            break;\r\n                        case (\"card\"):\r\n                            deleteCardFunction()\r\n                            break;\r\n                        default :\r\n                            window.Telegram.WebApp.showAlert('Что - то пошло не так')\r\n                    }\r\n                    setActive(false)\r\n                    \r\n                }\r\n            }\r\n        }} className = {className ? [cl.FalseTie , className].join(' ') : cl.FalseTie}>\r\n            {!end ? \r\n                        <svg className={active ? [cl.falseTie, cl.animationClass].join(' ') : cl.falseTie} width=\"18\" height=\"21\" viewBox=\"0 0 18 21\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                        <path d=\"M14.0978 1.80176C15.8171 1.80176 16.247 3.18964 16.247 3.88358V19.2571C16.247 20.2179 15.4204 19.8976 14.0978 19.2571L9.46867 17.1752C9.46867 17.1752 9.08075 17.0151 8.64205 17.0151C8.20335 17.0151 7.81542 17.1752 7.81542 17.1752L3.18633 19.2571C1.86373 19.8976 1.03711 20.2179 1.03711 19.2571V3.88358C1.03711 2.21812 2.46992 1.80176 3.18633 1.80176H14.0978Z\" stroke=\"#2EA5FF\" stroke-width=\"2\" />\r\n                      </svg>\r\n                      :\r\n                      <svg className={cl.falseTie} width=\"18\" height=\"21\" viewBox=\"0 0 18 21\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                      <path d=\"M14.0978 1.80176C15.8171 1.80176 16.247 3.18964 16.247 3.88358V19.2571C16.247 20.2179 15.4204 19.8976 14.0978 19.2571L9.46867 17.1752C9.46867 17.1752 9.08075 17.0151 8.64205 17.0151C8.20335 17.0151 7.81542 17.1752 7.81542 17.1752L3.18633 19.2571C1.86373 19.8976 1.03711 20.2179 1.03711 19.2571V3.88358C1.03711 2.21812 2.46992 1.80176 3.18633 1.80176H14.0978Z\" stroke=\"#2EA5FF\" stroke-width=\"2\" />\r\n                    </svg>\r\n\r\n        }\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FalseTie;","// extracted by mini-css-extract-plugin\nexport default {\"MyButton\":\"MyButton_MyButton__WcYW8\"};","import React from 'react';\r\nimport classes from  \"./MyButton.module.css\"\r\nconst MyButton = (props , className) => {\r\n    return (\r\n        <button className={ className ? [classes.MyButton, className].join(' ') : classes.MyButton } {...props}>{props.children}</button>\r\n    );\r\n};\r\n\r\nexport default MyButton;","var BackButton =  window.Telegram.WebApp.BackButton;\r\nexport default BackButton","import React, { memo, useCallback, useEffect, useState } from \"react\";\r\n\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport CardPage from \"../CardPage/CardPage\";\r\nimport Stage from \"../../components/UI/Stage/Stage\";\r\nimport AboutMain from \"../MyAds/components/AboutMain\";\r\nimport AboutInfo from \"../MyAds/components/AboutInfo\";\r\nimport AboutTop from \"../MyAds/components/AboutTop\";\r\nimport Top from \"../../components/UI/Top/Top\";\r\nimport axios from \"axios\";\r\nimport ExampleWorks from \"../MyAds/components/ExampleWorks\";\r\nimport MyLoader from \"../../components/UI/MyLoader/MyLoader\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport makeNewFile from \"../../functions/newMakeFile\";\r\nimport Compact from \"../../components/UI/Compact/Compact\";\r\nimport { changeMenuActive } from \"../../store/menuSlice\";\r\nimport \"../MyAds/MyAds.css\"\r\nimport BackButton from \"../../constants/BackButton\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n// const parOne = 2144832745;\r\n// const parTwo = 1;\r\nconst ProfilePage = ({ ...props }) => {\r\n  const [responce, setResponce] = useState(null);\r\n  useEffect(() => {});\r\n\r\n\r\n//   window.Telegram.WebApp.showAlert(window.Telegram.WebApp.initDataUnsafe.start_param)\r\n\r\n\r\n  const dispatch = useDispatch();\r\n  const setMenuActive = useCallback(\r\n    (arg) => {\r\n      dispatch(changeMenuActive(arg));\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  const navigate = useNavigate()\r\n\r\n\r\n\r\n  const [cards, setCards] = useState(null);\r\n  const [oneCards, setOneCard] = useState({\r\n    isOpen: true,\r\n    card: {    id: 0,\r\n        title: \"\",\r\n        description: \"\",\r\n        behanceLink: \"\",\r\n        dribbbleLink: \"\",\r\n        dropfileLink: \"\",\r\n        photosNames: \"\",\r\n        photos: [],},\r\n  });\r\n\r\n  useEffect( () => {\r\n    function backFunction(){\r\n        if (oneCards.isOpen){\r\n            setOneCard((value) => ({...value , isOpen : false}))\r\n        }\r\n        else{\r\n            navigate(\"/\")\r\n        }\r\n    }\r\n\r\n    BackButton.show()\r\n    BackButton.onClick(backFunction)\r\n    return () => {\r\n        BackButton.hide()\r\n        BackButton.offClick(backFunction)\r\n    }\r\n  } , [oneCards.isOpen, navigate] )\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    async function getAllCards() {\r\n      let localCards = [];\r\n      try {\r\n        const user = await axios.get(\"https://back-birga.ywa.su/user/findOne\", {\r\n          params: {\r\n            id: Number(window.Telegram.WebApp.initDataUnsafe.start_param.split('m')[1]),\r\n          },\r\n        });\r\n\r\n        let imTwo = await axios.get(\r\n            \"https://back-birga.ywa.su/advertisement/findCount\",\r\n            {\r\n              params: {\r\n                userId: Number(window.Telegram.WebApp.initDataUnsafe.start_param.split('m')[1]),\r\n              },\r\n            }\r\n          );\r\n\r\n        const cardOne = await axios.get(\"https://back-birga.ywa.su/card/findOne\" , {\r\n            params : {\r\n                id : Number(window.Telegram.WebApp.initDataUnsafe.start_param.split('m')[0])\r\n            }\r\n        })\r\n\r\n        let allCards = await axios.get(\r\n          \"https://back-birga.ywa.su/card/findByUser\",\r\n          {\r\n            params: {\r\n              userId: user.data.id,\r\n            },\r\n          }\r\n        );\r\n\r\n        for (let e of allCards.data) {\r\n          let files = await makeNewFile(e.folder, e.photos);\r\n          localCards.push({\r\n            id: e.id,\r\n            title: e.title,\r\n            description: e.description,\r\n            behanceLink: e.behance,\r\n            dribbbleLink: e.dribble,\r\n            dropfileLink: e.dropFile,\r\n            photosNames: e.photos,\r\n            photos: files,\r\n          });\r\n        }\r\n        let newFiles = await makeNewFile(cardOne.data.folder, cardOne.data.photos);\r\n        return {\r\n          localCards: localCards,\r\n          responce: { user: user.data, createNumber : imTwo.data },\r\n          card : {\r\n            id: cardOne.data.id,\r\n            title: cardOne.data.title,\r\n            description: cardOne.data.description,\r\n            behanceLink: cardOne.data.behance,\r\n            dribbbleLink: cardOne.data.dribble,\r\n            dropfileLink: cardOne.data.dropFile,\r\n            photosNames: cardOne.data.photos,\r\n            photos: newFiles,\r\n          }\r\n        };\r\n      } catch (e) {\r\n        \r\n        window.Telegram.WebApp.showAlert(\"Ссылка уже не действительна. Возможно, данные были удалены\");\r\n        navigate(\"/\")\r\n        console.log(e);\r\n      }\r\n    }\r\n    getAllCards().then((value) => {\r\n      setCards(value.localCards);\r\n      setResponce(value.responce);\r\n      setOneCard({isOpen : true , card : value.card})\r\n    });\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  const openFunc = useCallback(\r\n    (par) => {\r\n      setOneCard({ isOpen: true, card: par });\r\n    },\r\n    [setOneCard]\r\n  );\r\n\r\n  return (\r\n\r\n    <>\r\n    <div style={\r\n        {\r\n            transform : \"translateX(0%)\"\r\n        }\r\n    } className=\"aboutReaction\" {...props}>\r\n\r\n      {responce !== null ? (\r\n        <>\r\n          <Top setMenuActive={setMenuActive} name={\"Отклики\"} />\r\n\r\n          <AboutTop responce={responce} />\r\n\r\n          <AboutInfo responce={responce} />\r\n\r\n          <AboutMain aboutU={responce.user.about} />\r\n\r\n          <Compact className={\"stage-compact\"} title={\"Стаж работы\"}>\r\n            <Stage numberB={responce.user.stage} />\r\n          </Compact>\r\n\r\n\r\n\r\n          {cards === null ? (\r\n            <MyLoader />\r\n          ) : (\r\n            <ExampleWorks openFunc={openFunc} cards={cards} />\r\n          )}\r\n        </>\r\n      ) : (\r\n        <MyLoader />\r\n      )}\r\n    </div>\r\n\r\n    <CSSTransition\r\n            classNames=\"left-right\"\r\n            in={oneCards.isOpen}\r\n            timeout={400}\r\n            mountOnEnter\r\n            unmountOnExit\r\n          >\r\n            <CardPage style = {oneCards.isOpen ? {transform : \"translateX(0px)\"} : {}} card={oneCards.card} />\r\n          </CSSTransition>\r\n\r\n\r\n    </>\r\n  );\r\n};\r\nexport default memo(ProfilePage);\r\n"],"names":["_ref","className","id","task","navigate","agree","end","props","active","setActive","useState","savedTasks","useSelector","state","saves","tasks","savedResponces","responces","savedCards","cards","dispatch","useDispatch","useEffect","forEach","e","i","window","Telegram","WebApp","showAlert","deleteCardFunction","useCallback","showPopup","title","message","buttons","type","text","buttonId","deleteCard","deleteResponceFunc","deleteResponce","deleteAdFunction","deleteAdvertisement","_jsx","onClick","addAdvertisment","addResponce","addCard","cl","FalseTie","join","children","falseTie","width","height","viewBox","fill","xmlns","d","stroke","animationClass","MyButton","classes","BackButton","ProfilePage","responce","setResponce","setMenuActive","arg","changeMenuActive","useNavigate","setCards","oneCards","setOneCard","isOpen","card","description","behanceLink","dribbbleLink","dropfileLink","photosNames","photos","backFunction","value","show","hide","offClick","async","localCards","user","axios","get","params","Number","initDataUnsafe","start_param","split","imTwo","userId","cardOne","allCards","data","files","makeNewFile","folder","push","behance","dribble","dropFile","newFiles","createNumber","console","log","getAllCards","then","openFunc","par","_jsxs","_Fragment","style","transform","Top","name","AboutTop","AboutInfo","AboutMain","aboutU","about","Compact","Stage","numberB","stage","MyLoader","ExampleWorks","CSSTransition","classNames","in","timeout","mountOnEnter","unmountOnExit","CardPage","memo"],"sourceRoot":""}